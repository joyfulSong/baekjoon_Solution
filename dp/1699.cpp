// 32라는 수는 16+16, 25+1*7 로 나타낼 수 있다. 다양한 경우의 제곱수 중 최소값을 나타내야 한다.
// N이 있기 이전의, 1부터 숫자를 증가시키며 각 자연수를 최소제곱수로 나타내는 값을 DP에 저장해두고 사용하자. -- 2. 참고

// 1. 최소제곱수는 자신 보다 작은 제곱수들을 빼봄으로서 갱신한다: 11- 1*11 / 11 - 2*2 / 11 - 3*3 
// 2. for 문이 돌면서 앞서 d[9] d[2]를 알아두었기 때문에 또다른 연산(11-9를 하고 난 뒤에 이를 또 최소제곱수로 나타내는 연산작업)이 필요하지 않다. 
// 3. 또한 d[2]는 2를 만들기 위한 최소 수이므로 여기에 +1을 해준 값이 d[11], 11을 만들기 위한 최소제곱수의 개수(= d[11-9]+1)이 되는 것이다.
// 4. 어떤 수 n보다 작은 제곱수를 빼는 경우들을 따져야 하므로, 이중 포문인데 (1에서 n까지, 그리고 n보다 작은 제곱수들에 대한 계산)
//    두번쨰 for문은 현재 구하고자 하는 대상 숫자보다 작은 제곱수를 다루므로 for문 내에서 크기비교로 걸러진다. 
#include <iostream>
#include <vector>

using namespace std;

int Min(int a, int b) {
	return (a < b ? a : b);
}

int main()
{
	int N;
	cin >> N;

	vector<int> D(N+1); // D[0] 때문

	// D[0] = 0으로 그냥 둔다.
	for (int i = 1; i < N+1; i++) {
		D[i] = i; // 최대갯수: 다 1로만 이루어져있을 때로 초기화
		for (int j = 1; j * j <= i; j++) {
			// j*j <= i: i보다 작은 제곱수, 같아도 되는것은 4 = 2*2는 0이되고 갯수는 +1이므로
			D[i] = Min(D[i], D[i - j * j] + 1); //갱신 이전의 기존 값이랑 비교.
		}
	}

	cout << D[N] << "\n";

	return 0;

}