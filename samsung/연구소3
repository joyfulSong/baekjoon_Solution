/*
* 바이러스는 활성 상태와 비활성 상태
*	처음에 모든 바이러스는 비활성 상태
*	활성 상태인 바이러스는 상하좌우로 인접한 모든 빈 칸으로 동시에 복제되며, 1초가 걸린다.
* 활성 바이러스가 비활성 바이러스가 있는 칸으로 가면 비활성 바이러스가 활성으로 변한다.
*	!!!활성화된 바이러스가 비활성화된 바이러스가 있는 곳으로 가서 활성화 시키는 것은, 바이러스가 퍼뜨린 시간으로 계산하지 않는다.
* 연구소의 바이러스 M개를 활성 상태로 변경
* 모든 빈 칸에 바이러스를 퍼뜨리는 최소 시간
* 
* 
* N×N인 정사각형
* 빈 칸0, 벽1, 바이러스놓을 수 있는 위치2
* 어떻게 놓아도 모든 빈 칸에 바이러스를 퍼뜨릴 수 없는 경우에는 -1을 출력한다.
*/

/*
* 주어진 바이러스 위치 중 m개를 선택하여 최소 시간을 내야함. 
*	중복되지 않아야하고, 순서가 상관없으므로 조합이다.

* 바이러스 상하좌우 인접 모든 칸 이동 -> bfs
*	고른 바이러스가 도착한 칸이 2이면 시간 안잼
*							0이면 시간 잼 <- 시간 누적용 배열 만들고 도착할 때마다 이전시간 배열 기준 + 1
* 
* 빈 공간 개수 카운트 해둔 뒤, 빈공간에 도착할 때마다 센 뒤에 이 둘을 비교해 모든 탐색이 되었는지 체크.
*	모든 조합에 대해 모두 다 탐색했음에도 한번도 빈공간모두를 채운적이 없으면 1-리턴.
*/

#include <stdio.h>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

int n, m;
vector<vector<int>> map;
vector<vector<int>> visited;
vector<pair<int, int>> virus;
vector<bool> virus_visited;

int dx[] = { 0, 0, 1, -1 };
int dy[] = { 1, -1, 0, 0 };
int ans = 987987987;
int cnt_zero = 0;

void bfs() {
	queue<pair<int, int>> q;
	visited.assign(n + 1, vector<int>(n + 1, -1));
	// 동시에 돌리고 싶으면 이렇게 다 넣고 시작.
	for (int i = 0; i < virus.size(); ++i) {
		if (virus_visited[i]) {
			q.push(make_pair(virus[i].first, virus[i].second));
			visited[virus[i].first][virus[i].second] = 0;
		}
	}

	int check = 0;
	int time = 0;
	while (!q.empty()) {
		int cx = q.front().first;
		int cy = q.front().second;
		q.pop();
		for (int i = 0; i < 4; ++i) {
			int nx = cx + dx[i];
			int ny = cy + dy[i];
			if (nx < 0 || nx >= n || ny < 0 || ny >= n || map[nx][ny] == 1)
				continue;
			if (visited[nx][ny] == -1) {
				visited[nx][ny] = visited[cx][cy] + 1;
				// 동시에 돌리면 최소값 굳이 안찾아도 됨.
				if (map[nx][ny] == 0) {
					check++;
					time = visited[nx][ny];
				}
				q.push(make_pair(nx, ny));
			}
		}
	}
	// 0의 갯수가 방문한 0의 갯수와 같다면, 최소값으로 갱신
	// 아니라면 맨 마지막에 -1
	if (check == cnt_zero)
		ans = min(ans, time);
	return;
}

void pick(int k, int cnt) {
	if (cnt == m) {
		// 여기서 bfs
		bfs();
		return;
	}
	else {
		for (int i = k; i < virus.size(); ++i) {
			if (!virus_visited[i]) {
				virus_visited[i] = true;
				pick(i + 1, cnt + 1);
				virus_visited[i] = false;
			}
		}
	}
}

int main() {
	scanf("%d %d", &n, &m);

	map.assign(n + 1, vector<int>(n + 1, 0));

	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			scanf("%d", &map[i][j]);
			if (map[i][j] == 2) {
				virus.push_back(make_pair(i, j));
			}
			if (map[i][j] == 0) {
				cnt_zero++;
			}
		}
	}

	virus_visited.assign(virus.size() + 1, false);

	pick(0, 0);
	if (ans == 987987987)
		ans = -1;

	printf("%d\n", ans);
}
