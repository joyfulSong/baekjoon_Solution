/* 주사위 굴리기
- n*m 지도 -> (n+1)*(m+1), (1,1)에서 시작 (n,m)에서 끝남
- 주사위: (1,1)에 윗1 동쪽 3으로 놓여있음, 가장 첫 이동방향은 동쪽
  1) 이동방향 이동, 이동방향에 칸 없으면 반대방향으로 한칸
  2) 도착한 칸에 대해 점수 획득 (x,y)
     - 도착한 칸에 쓰인 정수 * (동서남북 연속으로 같은 숫자가 있는 곳의 합)
        - 상하좌우를 의미
  3) 이동방향: 아랫면 정수와 칸 정수 값 비교
-> 이동횟수 k가 주어지면 각 이동에서 획득하는 점수의 합 구하기

오답노트
- queue에 pair 형 쓸 때 조심
- 맵 범위 검사할 때 부등호 잘못
- map에 x,y 방향을 일관되게
- 배열 copy안됨, 그냥 for문으로
- 큐 서치해서 결과 없을 때 점수로는 1이 있어야했음
- main에서 0이 아닌 숫자를 반환 시 런타임에러가 날 수 있음
https://www.acmicpc.net/board/view/22980
*/

#include <iostream>
#include <algorithm>
#include <array>
#include <queue>

using namespace std;

int map[21][21]; //1부터 20까지 사용
int cube[6]; //주사위 정보 저장

int dx[4] = { 0, +1, 0, -1 }; //동남서북 순서
int dy[4] = { +1, 0, -1, 0 };

enum Directions
{
    EAST,
    SOUTH,
    WEST,
    NORTH
};

struct cube_info
{
    int cur_dir;
    int cur_x;
    int cur_y;
};

// function for moving cube
void move_cube(int dir)
{
    int cube_t[6] = {0,};
   /* for (int i = 0; i < 6; ++i)
    {
        cube_t[i] = cube[i];
    }*/
    memcpy(cube_t, cube, sizeof(cube));

    switch (dir)
    {
    case EAST:
        cube[1] = cube_t[5];
        cube[2] = cube_t[1];
        cube[3] = cube_t[2];
        cube[5] = cube_t[3];
        break;

    case SOUTH:
        cube[0] = cube_t[5];
        cube[2] = cube_t[0];
        cube[4] = cube_t[2];
        cube[5] = cube_t[4];
        break;

    case WEST:
        cube[1] = cube_t[2];
        cube[2] = cube_t[3];
        cube[3] = cube_t[5];
        cube[5] = cube_t[1];
        break;

    case NORTH:
        cube[0] = cube_t[2];
        cube[2] = cube_t[4];
        cube[4] = cube_t[5];
        cube[5] = cube_t[0];
        break;
    }
}

int decide_dir(int cube, int map, int cur_dir)
{
    if (cube > map)
    {
        //enum 3인 북에서 1칸 이동시 0인 동
        if (cur_dir == NORTH)
        {
            return EAST;
        }
        else
        {
            return cur_dir + 1;
        }
    }

    else if (cube < map)
    {
        //enum 0인 동에서 -1칸 이동시 3인 북
        if (cur_dir == EAST)
        {
            return NORTH;
        }
        else
        {
            return cur_dir - 1;
        }
    }
    else
    {
        return cur_dir;
    }

}

// map 상에서 같은 숫자가 있는 곳의 합구하기
int search(int x, int y)
{
    queue<pair<int, int>>  q;
    int ch[21][21] = { 0, }; // 방문했는지 알기 위함
    int value = map[x][y];
    int cnt(0);

    q.push(make_pair(x, y));
    while (!q.empty())
    {
        pair<int, int> t_loc = q.front();
        q.pop();

        for (int i = 0; i < 4; ++i)
        {
            int t_x = t_loc.first + dx[i];
            int t_y = t_loc.second + dy[i];

            if (value == map[t_x][t_y] && ch[t_x][t_y] != 1)
            {
                ch[t_x][t_y] = 1;
                std::cout << "search point : " << t_x << ", " << t_y << std::endl;
                q.push(make_pair(t_x, t_y));
                ++cnt; // 갯수를 찾았으므로 증가시킨다
                std::cout << "cnt " << cnt << std::endl;
            }
        }
    }

    return cnt;
}
//
int main()
{
    int n, m, k, score(0);
    cin >> n >> m >> k;

    for (int i = 1; i < n + 1; ++i)
    {
        for (int j = 1; j < m + 1; ++j)
        {
            cin >> map[i][j];
        }
    }

    //초기세팅
    cube[0] = 2;
    cube[1] = 4;
    cube[2] = 1;
    cube[3] = 3;
    cube[4] = 5;
    cube[5] = 6;

    cube_info cur_cube = { EAST, 1, 1 };

    // k 횟수만큼 map에서 이동 시작
    for (int i = 0; i < k; ++i)
    {
        // 방향에 대해 map 상의 주사위 위치 이동
        int tmp_x = cur_cube.cur_x + dx[cur_cube.cur_dir];
        int tmp_y = cur_cube.cur_y + dy[cur_cube.cur_dir];

        // map을 벗어나면 반대방향으로 이동
        if (tmp_x < 1 || tmp_x > n || tmp_y < 1 || tmp_y > m)
        {
            if (cur_cube.cur_dir < 2)
            {
                cur_cube.cur_dir += 2;
            }
            else
            {
                cur_cube.cur_dir -= 2;
            }
            //반대 방향에 대해 위치 적용
            tmp_x = cur_cube.cur_x + dx[cur_cube.cur_dir];
            tmp_y = cur_cube.cur_y + dy[cur_cube.cur_dir];
        }

        std::cout << "i: x, y " << tmp_x << ", " << tmp_y << std::endl;
        //해당 방향으로 이동 및 전개도 변화
        move_cube(cur_cube.cur_dir);
        for (int l = 0; l < 6; ++l)
        {
            cout << cube[l] << " ";
        }
        cout << endl;

        // 옮겨진 위치의 칸에서의 점수 계산
        int same_num_cnt = search(tmp_x, tmp_y);
        // 아무 점수도 획득하지 못하면 현재 맵의 값만 얻을 수 있게.
        if (same_num_cnt == 0) same_num_cnt = 1;
        score += map[tmp_x][tmp_y] * same_num_cnt;
        std::cout << "i: " << same_num_cnt << " * " << map[tmp_x][tmp_y] << " = " << score << endl;

        // 값의 비교를 통해 다음 이동 방향 결정
        cur_cube.cur_dir = decide_dir(cube[5], map[tmp_x][tmp_y], cur_cube.cur_dir); // 다음 이동방향 결정
        std::cout << "cur_dir " << cur_cube.cur_dir << std::endl;
        // 다음 for문에서 사용하기 위해 주사위 정보 변경
        cur_cube = { cur_cube.cur_dir, tmp_x, tmp_y };
    }
   
    std::cout << score << endl;

    return 0;
}
