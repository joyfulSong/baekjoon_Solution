#include <iostream>

using namespace std;

int map[503][503], n, m;

const char block[19][4][5] = {
    {
        "1111",
        "0000",
        "0000",
        "0000",
    },
    {
        "1000",
        "1000",
        "1000",
        "1000",
    },
    {
        "1100",
        "1100",
        "0000",
        "0000",
    },
    {
        "1000",
        "1000",
        "1100",
        "0000",
    },
    {
        "1110",
        "1000",
        "0000",
        "0000",
    },
    {
        "1100",
        "0100",
        "0100",
        "0000",
    },
    {
        "0010",
        "1110",
        "0000",
        "0000",
    },
    {
        "0100",
        "0100",
        "1100",
        "0000",
    },
    {
        "1000",
        "1110",
        "0000",
        "0000",
    },
    {
        "1100",
        "1000",
        "1000",
        "0000",
    },
    {
        "1110",
        "0010",
        "0000",
        "0000",
    },
    {
        "1000",
        "1100",
        "0100",
        "0000",
    },
    {
        "0110",
        "1100",
        "0000",
        "0000",
    },
    {
        "0100",
        "1100",
        "1000",
        "0000",
    },
    {
        "1100",
        "0110",
        "0000",
        "0000",
    },
    {
        "1110",
        "0100",
        "0000",
        "0000",
    },
    {
        "0100",
        "1100",
        "0100",
        "0000",
    },
    {
        "0100",
        "1110",
        "0000",
        "0000",
    },
    {
        "1000",
        "1100",
        "1000",
        "0000",
    }
};

int cal_block(int idx, int m_r, int m_c) {
	//m_r: 세로축(행) m_c: 가로축(열)
	int ret = 0;
	for (int i = 0; i < 4; ++i) {
		for (int j = 0; j < 4; ++j) {
			ret += (block[idx][i][j] - '0') * (map[m_r + i][m_c + j]);
		}
	}
	return ret;
}
int main() {
	ios_base::sync_with_stdio(false);

	cin >> n >> m;
	int candi = 0, res = -2147000000;

	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			cin >> map[i][j];
		}
	}

	for (int i = n; i < n + 3; ++i) {
		for (int j = 0; j < m; ++j) {
			map[i][j] = -10000;
		}
	}

	for (int i = 0; i < n; i++) {
		for (int j = m; j < m + 3; ++j) {
			map[i][j] = -10000;
		}
	}

	for (int i = n; i < n + 3; ++i) {
		for (int j = m; j < m + 3; ++j) {
			map[i][j] = -10000;
		}
	}

	for (int k = 0; k < 19; ++k) {
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				candi = cal_block(k, i, j); // 맵에서는 한칸씩 이동하고, block에 대해 체크하는 함수에서는 '그 한칸' 기준으로 4칸을 다 돈다.(범위 넘어가도 최솟값 처리 됨)
				if (candi > res) res = candi;
			}
		}
	}
	
	cout << res;


}